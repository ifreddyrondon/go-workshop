Golang workshop - Santiago
Day 1 ü§ì
17 Nov 2018
Tags: Go, workshop

Freddy Rond√≥n
Software Developer, Mercadolibre
freddy.rondon@mercadolibre.cl
https://github.com/ifreddyrondon/
@ifreddyrondon

* ¬øQui√©n soy?

.image ./resources/chamo_gopher.jpg 400 _
.caption [[mailto:ifreddyrondon@gmail.com][Freddy Rond√≥n (Chamo)]] _Software_ _Developer_

* ¬øQu√© hacemos en MercadoLibre?

- Dise√±amos y desarrollamos APIs criticas.
- El desaf√≠o es la *escalabilidad*. Son problemas _grandes_: muchos datos y much√≠simo tr√°fico.
- Tienen que ser r√°pidas - cada segundo de espera emprobrece la experiencia de uso.
- De alta disponibilidad - uptime 99.9...%
- Y costo-eficientes.

- *Golang* es un lenguaje espectacular para hacer esto.

* But first... WIFI

RED -> Guest
Usuario / Password
guest_Meli / Meli01*
guest_Meli2 / Meli02*
guest_Meli3 / Meli03*
guest_Meli4 / Meli04*

* Esta presentaci√≥n es auto-referencial ü§ì:

https://bit.ly/2K8dtT9

* Roadmap

- Clase 1: Por qu√© Go? y Go basics.
Filosof√≠a de dise√±o.
Hello World! y Basics.

- Clase 2: Memoria.
Punteros.
Tipos de datos.
Testing.

- Clase 3: Concurrencia. APIs en Go.
Manejo de errores.
Goroutines.
APIs.

* Historia

- En los √∫ltimos 20 a√±os...
- Arranca como proyecto en 2007 dentro de Google. Goals: resolver problemas comunes en sistemas distribuidos a gran escala.
- Dise√±ado por Rob Pike (Plan 9 y Inferno OS), Robert Griesemer (motor de JavaScript V8 ) y Ken Thompson (Bell y en el equipo de Unix).
- Predecesores? `C`.
- `C++`? No.
- Anunciado al mundo en 2009, en 2012 se estabiliza la API con la versi√≥n 1.0 . La versi√≥n actual es la 1.11.x, con cambios m√≠nimos.

* Historia - el contexto en Google.

- Muchos developers en sus primeros a√±os de carrera, familiarizados -por la facultad- con lenguajes _procedurales_ como `C`.
- Es imperativo que los desarrolladores puedan ser *productivos* *muy* *r√°pidamente* con lenguajes y herramientas _productivas_.
- El lenguaje fue dise√±ado por y para personas que escriben, leen y debuggean grandes piezas de software.

* Motivaci√≥n: ¬øpor qu√©?

	Programming had become too difficult and the choice of languages was partly to blame.
	One had to choose either efficient compilation, efficient execution, or ease of programming;
	all three were not available in the same mainstream language.

Necesidad de un lenguaje

- *Moderno*: pensado para el *cloud* y procesadores multi-core.
- *Amigable*: con herramientas de desarrollo (`testing`, `benchmarking`, `present`, `gofmt`) incluidas.
- *Eficiente*: compilado, con tipos est√°ticos.
- *R√°pido*: r√°pido para buildear, r√°pido para ejecutar.

* Motivaci√≥n: ¬øpor qu√©?

.image ./resources/compiling.png 500 _

.link https://xkcd.com/303/

* Motivaci√≥n: Objetivos

- Simple para escribir: menos es m√°s.
- Simple para leer: nos pasamos mucho tiempo leyendo c√≥digo de otras personas.
- Concurrente (multi-core, asincr√≥nico).
- Para el cloud: que compile a un binario est√°tico sin dependencias.
- Memory footprint bajo.
- Lo mas "autocontenido" posible.

	... you can build a production binary on your Mac and ship it up to a Linux server
	and just run it without any crazy installs or any worrying about dependency conflicts.

	-- Brian Ketelsen, Microsoft.

* Motivaci√≥n

- *El*"sweet*spot"*de*Go*esta*en*escribir*software*de*backend*.

	Go is a good general purpose language, but the sweet spot it was designed for
	is writing large-scale, concurrent, server-side software.

* Qui√©nes actualmente utilizan Go?

- YouTube
- Google
- Microsoft
- Uber
- SpaceX
- Facebook
- Github
- Netflix
- Mercadolibre üòé

- [[https://github.com/golang/go/wiki/GoUsers][Otros...]]

* ¬øProyectos hechos en GO?

Docker

.image ./resources/docker.png _ _

* ¬øProyectos hechos en GO?

Kubernetes

.image ./resources/kubernetes.png _ _

* ¬øProyectos hechos en GO?

CockroachDB (first stable relese)

.image ./resources/cockroach.png _ _

* ¬øProyectos hechos en GO?

.image ./resources/dropbox.jpg _ _

* ¬øParadigma?

- Imperativo
- Estructurado
- No orientado a objetos (¬ø?)

* Go Basics

- Fuertemente tipado
- Inferencia de tipos
- Funciones son _first_ _class_ _citizens_: las funciones pueden ser pasadas como par√°metros
- Par√°metros pasados siempre por _valor_
- Punteros para pasar par√°metros por _referencia_
- GC
- _Composition_ en vez de "Orientado a objetos"
- Interfaces
- Built in Web Server
- Built in Testing framework


* Instalando GO!

- Descarga la versi√≥n para tu OS desde [[https://golang.org/dl/][AQU√ç]]
- Abrir el pkg y seguir las [[https://golang.org/doc/install][instrucciones]] en pantalla, Golang quedar√° instalado por default en -> /usr/local/go

	The GOPATH environment variable specifies the location of your workspace.
	It defaults to a directory named go inside your home directory,
	so $HOME/go on Unix, and %USERPROFILE%\go (usually C:\Users\YourName\go) on Windows.

- Exportar [[https://golang.org/doc/code.html#GOPATH][GOPATH]] apuntando a directorio de instalaci√≥n, agregar  GOPATH/bin al PATH y LISTO :)

	export GOPATH=$HOME/go
	export PATH=$PATH:$GOPATH/bin

- Para chequear tu la instalaci√≥n correcta tipear -> go version

.link https://github.com/golang/go/wiki/SettingGOPATH Setting GOPATH

* ¬øDonde programar?

- [[https://github.com/Microsoft/vscode-go][Plugin para Visual Studio Code]]
- [[https://www.jetbrains.com/go/][Goland jetbrains IDE]]
- [[https://github.com/fatih/vim-go][Plugin para vim]]
- [[https://github.com/DisposaBoy/GoSublime][Plugin para Sublime]]
- [[https://github.com/visualfc/liteide][Lite Ide: Go IDE]]
- [[https://github.com/joefitzgerald/go-plus][Plugin para Atom]]
- [[https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins][Varios mas... ]]

* Go Basics: Workspace

GOPATH
	|_ BIN: Contiene los archivos ejecutables
	|_ SRC: Contiene los fuentes organizados en paquetes
	|_ PKG: Contiene los paquetes en formato binario

*Default* *GOPATH* (go >1.8)

- Unix: $HOME/go
- Windows: %USERPROFILE%/go (en general es `C:\Users\TuNombre\go`)

* 1¬∫ Ejercicio

.image ./resources/hello_world.gif _ _

* Hello world!!

.play -edit ./resources/src/00_hello_world/main.go

Comandos b√°sicos desde consola

	go command [arguments]

	build     Compila paquetes y dependencias
	clean     Remueve archivos object
	get       Descarga e instala paquetes y dependencias
	install   Compila e instala paquetes y dependencias
	run       Compila y corre paquetes y dependencias
	test      Testea paquetes
	fmt       Formatea tu c√≥digo
	...

* Keywords

- Los Keywords son palabras reservadas
- No pueden ser usados como identificadores
- Go apunta a ser simple y tener pocos keywords

.image ./resources/keywords.png _ _


* Comentarios

- 2 formas de hacer comentarios
- Estilo C
	/* Multiline comment
		..
	*/
- Estilo C++
	// Single line comment

* Tipos B√°sicos

- bool
- string
- int  int8  int16  int32  int64
- uint uint8 uint16 uint32 uint64 uintptr
- byte // alias for uint8
- rune // alias for int32 - unicode code point
- float32 float64
- complex64 complex128

* Constantes

- Pueden ser del tipo: character, string, boolean o valores num√©ricos

- Ejemplos:

	const World = "‰∏ñÁïå"
	const Truth = true


* Inicializaci√≥n de Variables

	var s string
	var s string = ""
	var s = ""
	s:=""

*Zero* *value:*

*0* para num√©ricos - *false* para booleanos - *""* para strings

.play -edit ./resources/src/01_zero_values/main.go

* Paquetes

.code -edit ./resources/src/04_packages/math/math.go
.play -edit ./resources/src/04_packages/main.go

* Tipos de if

	if x < 0 { }

	if v := math.Pow(x, n); v < lim {}

	if ... {} else { }

* Iteraciones #1

_for_initialization;_condition;_post_{_}_

.play -edit ./resources/src/02_iterations/0/main.go

* Iteraciones #2

_for_condition_{_}_

.play -edit ./resources/src/02_iterations/1/main.go

* Iteraciones #3

_for_{_}_

.play -edit ./resources/src/02_iterations/2/main.go

* Iteraciones #4

_using_range_

.play -edit ./resources/src/02_iterations/3/main.go

* Switch

.play -edit ./resources/src/02_iterations/4/main.go

* Funciones

.play -edit ./resources/src/03_functions/main.go

.link https://blog.golang.org/gos-declaration-syntax Go's Declaration Syntax

* Conversi√≥n de variables

.play -edit ./resources/src/05_variables_type_convertion/main.go

* 2¬∫ Ejercicio

Hacer un programa que reciba un par√°metro *p* por consola y que calcule la suma de los valores *v* tales que *0*<=*v*<=*p* , siendo *v* un n√∫mero divisible por *3* o por *5*

- Ayuda para leer argumentos desde la consola

	for i := 1; i < len(os.Args); i++ {
		fmt.Println(os.Args[i])
	}

* Por qu√© est√° bueno estudiar Golang hoy?

- Go es muy joven y crece muy r√°pido -> somos early adopters!

.image ./resources/programming_language_trends.png 400 _

.link https://www.benfrederickson.com/ranking-programming-languages-by-github-users/ Ranking Programming Languages by GitHub Users

* Por qu√© est√° bueno estudiar Golang hoy?

- Y a la gente parece gustarle:

.image ./resources/most_loved.png 400 _

.link https://insights.stackoverflow.com/survey/2018#most-loved-dreaded-and-wanted Stack Overflow - Developer Survey Results 2018

* Algunos recursos interesantes

.link https://tour.golang.org/welcome/1 The Go Tour is the best place to start.
.link https://golang.org/doc/effective_go.html Effective Go to write idiomatic Go code.
.link https://golang.org/pkg/ Go standard library documentation.
.link https://github.com/golang/go/wiki#getting-started-with-go WIKI getting-started-with-go
.link https://play.golang.org/ Go Playground
.link https://invite.slack.golangbridge.org/ gopher.slack.com #newbies
.link https://twitter.com/golang @golang twitter
.link http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/ gotchas-and-common-mistakes